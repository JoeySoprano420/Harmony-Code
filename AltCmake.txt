# Minimum CMake Version
cmake_minimum_required(VERSION 3.20)

# Project Name and Version
project(HarmonyCompiler VERSION 1.0 LANGUAGES C CXX)

# Set C++ Standard (Ensure no compiler extensions are used)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Set Build Type if not already defined (default to Release)
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose Debug or Release" FORCE)
endif()

# Compiler Warnings and Flags (Modular and Configurable)
set(WARNING_FLAGS "-Wall -Wextra -Wpedantic")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${WARNING_FLAGS}")

# Platform-Specific Definitions and Flags
if(WIN32)
    add_definitions(-DPLATFORM_WINDOWS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /D_WIN32 /MP")  # Multi-threaded compilation on MSVC
elseif(APPLE)
    add_definitions(-DPLATFORM_MAC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__APPLE__ -pthread")
elseif(UNIX)
    add_definitions(-DPLATFORM_LINUX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__linux__ -pthread")
endif()

# Set Output Directories for Binary and Library Files
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Source and Header Files Discovery (Recursive)
file(GLOB_RECURSE SRC_FILES src/*.cpp src/**/*.cpp)
file(GLOB_RECURSE HEADER_FILES include/*.h include/**/*.h)

# Include Directories for Header Files
include_directories(${PROJECT_SOURCE_DIR}/include)

# Build Option for Static Linking
option(STATIC_LINK "Build with static linking" OFF)

if(STATIC_LINK)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc")
endif()

# Find and Include Dependencies (YAML-CPP, JSONCPP, LLVM)
find_package(PkgConfig REQUIRED)
find_package(LLVM REQUIRED CONFIG)

pkg_check_modules(YAML_CPP REQUIRED yaml-cpp)
pkg_check_modules(JSONCPP REQUIRED jsoncpp)

# Define the Executable Target (Linking Dependencies and Includes)
add_executable(HarmonyCompiler ${SRC_FILES} ${HEADER_FILES})

target_include_directories(HarmonyCompiler PRIVATE
    ${YAML_CPP_INCLUDE_DIRS}
    ${JSONCPP_INCLUDE_DIRS}
    ${LLVM_INCLUDE_DIRS}
)

target_link_libraries(HarmonyCompiler PRIVATE
    ${YAML_CPP_LIBRARIES}
    ${JSONCPP_LIBRARIES}
    ${LLVM_LIBRARIES}
)

# Debugging Flags for Debug Builds
if(CMAKE_BUILD_TYPE MATCHES Debug)
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -DDEBUG")
endif()

# Optimization Flags for Release Builds
if(CMAKE_BUILD_TYPE MATCHES Release)
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -march=native -flto")
endif()

# Enable Testing Framework
enable_testing()
add_subdirectory(tests)

# Installation Configuration (Binary, Headers, Libraries)
install(TARGETS HarmonyCompiler RUNTIME DESTINATION bin)
install(DIRECTORY include/ DESTINATION include)
install(FILES ${HEADER_FILES} DESTINATION include)

# CPack Packaging Configuration (Installer & Distribution)
set(CPACK_PACKAGE_NAME "HarmonyCompiler")
set(CPACK_PACKAGE_VERSION "1.0.0")
set(CPACK_PACKAGE_DESCRIPTION "Harmony Compiler for high-performance code execution")
set(CPACK_PACKAGE_CONTACT "support@harmonycode.org")
include(CPack)

# Additional Optimization (If desired for specific platform or config)
if(APPLE)
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
endif()

# Define Post-Build Steps (Optional, e.g., for Custom Scripts)
# add_custom_command(TARGET HarmonyCompiler POST_BUILD COMMAND ${CMAKE_COMMAND} -E echo "Build Completed Successfully!")

# Output message to indicate successful configuration
message(STATUS "Project configured successfully with CMake version: ${CMAKE_VERSION}")
